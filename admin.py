# admin.py

from aiogram import Router, Bot
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.filters import Command

import database
from config import ADMIN_IDS

router = Router()

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def notify_admins_about_event(
    bot: Bot,
    event_id: int,
    event_name: str,
    event_description: str,
    event_datetime: str,
    event_city: str,
    event_direction: str
):
    """
    –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏,
    –ø—Ä–∏–∫—Ä–µ–ø–∏–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é inline-–∫–Ω–æ–ø–∫–∏ ¬´–û–¥–æ–±—Ä–∏—Ç—å¬ª/¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª.
    """
    text = (
        f"üì¢ <b>–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>\n\n"
        f"üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event_name}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event_description}\n"
        f"üóì <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event_datetime}\n"
        f"üìç <b>–ì–æ—Ä–æ–¥:</b> {event_city}\n"
        f"üé≠ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {event_direction}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{event_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  callback_data=f"reject_{event_id}")
        ]
    ])
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

async def notify_subscribers(
    bot: Bot,
    event_name: str,
    event_description: str,
    event_datetime: str,
    event_city: str,
    event_direction: str
):
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞+–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    subs = database.get_subscribers(event_city, event_direction)
    if not subs:
        return

    text = (
        f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!\n\n"
        f"üí• {event_name}\n"
        f"üìç {event_city} ({event_direction})\n"
        f"üóì {event_datetime}\n\n"
        f"{event_description}"
    )
    for tg_id in subs:
        try:
            await bot.send_message(chat_id=tg_id, text=text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫—É {tg_id}: {e}")


@router.callback_query(lambda c: c.data.startswith("approve_") or c.data.startswith("reject_"))
async def moderation_handler(callback_query: CallbackQuery, bot: Bot):
    action, raw_id = callback_query.data.split("_", 1)
    event_id = int(raw_id)

    if not is_admin(callback_query.from_user.id):
        return await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", show_alert=True)

    if action == "approve":
        event = database.approve_event(event_id)
        if not event:
            await callback_query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏.")
            return await callback_query.answer()

        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—à–ª–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        database.mark_day_notified(event_id)
        database.mark_hour_notified(event_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
        broadcast_text = (
            f"üì¢ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n"
            f"üí• {event['event_name']}\n"
            f"üìç {event['event_city']} ({event['event_direction']})\n"
            f"üóì {event['event_date']}\n\n"
            f"{event['event_description']}"
        )
        recipients = set(database.get_subscribers(event["event_city"], event["event_direction"])) | set(ADMIN_IDS)
        for tg_id in recipients:
            try:
                await bot.send_message(chat_id=tg_id, text=broadcast_text, parse_mode="HTML")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å {tg_id}: {e}")

        await callback_query.message.edit_text(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ ¬´{event['event_name']}¬ª –æ–¥–æ–±—Ä–µ–Ω–æ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º."
        )

    else:  # reject
        database.reject_event(event_id)
        await callback_query.message.edit_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

    await callback_query.answer()


@router.message(Command("broadcast"))
async def broadcast_command(msg: Message, bot: Bot):
    """
    /broadcast <—Ç–µ–∫—Å—Ç>
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    if not is_admin(msg.from_user.id):
        return await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    text_to_send = msg.text.removeprefix("/broadcast").strip()
    if not text_to_send:
        return await msg.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏>")

    await msg.reply("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É‚Ä¶")

    all_users = database.get_all_users()
    recipients = set(all_users) | set(ADMIN_IDS)
    for tg_id in recipients:
        try:
            await bot.send_message(chat_id=tg_id, text=text_to_send)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ {tg_id}: {e}")

    await msg.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
