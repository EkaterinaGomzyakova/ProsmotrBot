from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import ADMIN_IDS
import database

router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in ADMIN_IDS

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async def send_broadcast(text, bot: Bot):
    subscribers = database.get_all_users()
    for telegram_id in subscribers:
        try:
            await bot.send_message(telegram_id, text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
@router.message(Command("broadcast"))
async def broadcast_command(msg: Message, bot: Bot):
    if not is_admin(msg.from_user.id):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    text = msg.text.replace("/broadcast", "").strip()
    if not text:
        await msg.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast [—Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏]")
        return

    await msg.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await send_broadcast(text, bot)
    await msg.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
async def notify_subscribers(bot: Bot, event_name, event_description, event_date, event_city, event_direction):
    subscribers = database.get_subscribers(event_city, event_direction)

    message_text = f"üì¢ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n" \
                   f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {event_name}\n" \
                   f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event_description}\n" \
                   f"üìÖ –î–∞—Ç–∞: {event_date}\n" \
                   f"üìç –ì–æ—Ä–æ–¥: {event_city}\n" \
                   f"üé≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {event_direction}"

    for telegram_id in subscribers:
        try:
            await bot.send_message(telegram_id, message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {telegram_id}: {e}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
async def notify_admins_about_event(bot: Bot, event_id, event_name, event_description, event_date, event_city):
    message_text = (
        f"üì¢ <b>–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>\n\n"
        f"üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event_name}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event_description}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {event_date}\n"
        f"üìç <b>–ì–æ—Ä–æ–¥:</b> {event_city}\n"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{event_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{event_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(lambda c: c.data.startswith("approve_") or c.data.startswith("reject_"))
async def handle_moderation(callback_query: CallbackQuery, bot: Bot):
    action, event_id = callback_query.data.split("_")
    event_id = int(event_id)

    try:
        if action == "approve":
            event = database.approve_event(event_id)
            if event:
                await notify_subscribers(bot, event["event_name"], event["event_description"], event["event_date"], event["event_city"], event["event_direction"])
                await callback_query.message.edit_text(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event['event_name']}' –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
            else:
                await callback_query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        else:
            await database.reject_event(event_id)
            await callback_query.message.edit_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å ID {event_id}: {e}")  # –ü–µ—á–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        await callback_query.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        await callback_query.answer()
    
    await callback_query.answer()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@router.message(Command("publish"))
async def publish_event(msg: Message):
    if not is_admin(msg.from_user.id):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
