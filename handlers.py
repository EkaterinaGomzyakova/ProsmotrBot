# handlers.py

from datetime import date, datetime

from aiogram import F, Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

import database
import text
from admin import notify_admins_about_event, notify_subscribers

router = Router()

# =========================
# –í–°–¢–†–û–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ (–ø–µ—Ä–µ–Ω–æ—Å –∏–∑ kb.py)
# =========================
city_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ú–æ—Å–∫–≤–∞",           callback_data="city_Moscow")],
    [InlineKeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="city_Saint_Petersburg")],
    [InlineKeyboardButton(text="–ü–µ—Ä–º—å",           callback_data="city_Perm")],
    [InlineKeyboardButton(text="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",    callback_data="city_Ekaterinburg")],
    [InlineKeyboardButton(text="–í–æ–ª–≥–æ–≥—Ä–∞–¥",       callback_data="city_Volgograd")],
    [InlineKeyboardButton(text="–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", callback_data="city_Nizhny_Novgorod")],
])

direction_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∏ UX/UI-–¥–∏–∑–∞–π–Ω", callback_data="direction_product")],
    [InlineKeyboardButton(text="–ö–æ–º–¥–∏–∑",                      callback_data="direction_communication")],
    [InlineKeyboardButton(text="–ú–æ—É—à–µ–Ω-–¥–∏–∑–∞–π–Ω",               callback_data="direction_motion")],
])

# =========================
# –°–æ—Å—Ç–æ—è–Ω–∏—è
# =========================
class Form(StatesGroup):
    # –ü–æ–¥–ø–∏—Å–∫–∞
    waiting_for_city_sub          = State()
    waiting_for_direction_sub     = State()
    # –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫
    waiting_for_city_search       = State()
    waiting_for_direction_search  = State()
    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
    waiting_for_event_direction   = State()
    waiting_for_event_city        = State()
    waiting_for_event_name        = State()
    waiting_for_event_description = State()
    waiting_for_event_date        = State()
    waiting_for_event_time        = State()


@router.message(Command("start"))
async def start_handler(msg: Message, state: FSMContext):
    database.add_user(msg.from_user.id, msg.from_user.full_name)
    await state.clear()
    # –ü—Ä–µ–¥–ª–æ–∂–∏–º —Å—Ä–∞–∑—É –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /subscribe
    await msg.answer(
        text.greet.format(name=msg.from_user.full_name) +
        "\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe"
    )


# ‚Äî –ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî
@router.message(Command("subscribe"))
async def subscribe_start(msg: Message, state: FSMContext):
    database.add_user(msg.from_user.id, msg.from_user.full_name)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=city_menu)
    await state.set_state(Form.waiting_for_city_sub)


@router.callback_query(F.data.startswith("city_"), StateFilter(Form.waiting_for_city_sub))
async def sub_city(callback: CallbackQuery, state: FSMContext):
    city = callback.data.split("_", 1)[1]
    await state.update_data(city=city)
    await callback.answer(f"–ì–æ—Ä–æ–¥: {city}")
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=direction_menu)
    await state.set_state(Form.waiting_for_direction_sub)


@router.callback_query(F.data.startswith("direction_"), StateFilter(Form.waiting_for_direction_sub))
async def sub_direction(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    direction = callback.data.split("_", 1)[1]
    database.add_subscription(callback.from_user.id, data["city"], direction)
    await callback.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞: {data['city']} ‚Äî {direction}")
    await callback.message.answer(
        "–ì–æ—Ç–æ–≤–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ —Å–æ–±—ã—Ç–∏—è."
    )
    await state.clear()


# ‚Äî –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ ‚Äî
@router.message(Command("pack"))
async def search_start(msg: Message, state: FSMContext):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=city_menu)
    await state.set_state(Form.waiting_for_city_search)


@router.callback_query(F.data.startswith("city_"), StateFilter(Form.waiting_for_city_search))
async def search_city(callback: CallbackQuery, state: FSMContext):
    city = callback.data.split("_", 1)[1]
    await state.update_data(search_city=city)
    await callback.answer(f"–ì–æ—Ä–æ–¥: {city}")
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=direction_menu)
    await state.set_state(Form.waiting_for_direction_search)


@router.callback_query(F.data.startswith("direction_"), StateFilter(Form.waiting_for_direction_search))
async def search_direction(callback: CallbackQuery, state: FSMContext):
    data      = await state.get_data()
    city      = data["search_city"]
    direction = callback.data.split("_", 1)[1]
    events    = database.get_events_by_filter(city, direction)

    if not events:
        await callback.message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        for evt in events:
            photo = evt.get("image_url") or text.default_event_image
            caption = (
                f"üí• {evt['event_name']}\n"
                f"üìç {evt['event_city']} ({direction})\n\n"
                f"üóì {evt['event_date']}\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{evt['event_description']}"
            )
            await callback.message.answer_photo(photo=photo, caption=caption)

    await state.clear()


# ‚Äî –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ ‚Äî
@router.message(Command("add"))
async def propose_start(msg: Message, state: FSMContext):
    database.add_user(msg.from_user.id, msg.from_user.full_name)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=direction_menu)
    await state.set_state(Form.waiting_for_event_direction)


@router.callback_query(F.data.startswith("direction_"), StateFilter(Form.waiting_for_event_direction))
async def propose_direction(callback: CallbackQuery, state: FSMContext):
    direction = callback.data.split("_", 1)[1]
    await state.update_data(event_direction=direction)
    await callback.answer(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –≥–æ—Ä–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=city_menu)
    await state.set_state(Form.waiting_for_event_city)


@router.callback_query(F.data.startswith("city_"), StateFilter(Form.waiting_for_event_city))
async def propose_city(callback: CallbackQuery, state: FSMContext):
    city = callback.data.split("_", 1)[1]
    await state.update_data(event_city=city)
    await callback.answer(f"–ì–æ—Ä–æ–¥: {city}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(Form.waiting_for_event_name)


@router.message(Form.waiting_for_event_name)
async def propose_name(msg: Message, state: FSMContext):
    await state.update_data(event_name=msg.text)
    await msg.answer("–û–ø–∏—à–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:")
    await state.set_state(Form.waiting_for_event_description)


@router.message(Form.waiting_for_event_description)
async def propose_desc(msg: Message, state: FSMContext):
    await state.update_data(event_description=msg.text)
    kb_cal = await SimpleCalendar().start_calendar()
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=kb_cal)
    await state.set_state(Form.waiting_for_event_date)


@router.callback_query(SimpleCalendarCallback.filter(), StateFilter(Form.waiting_for_event_date))
async def process_calendar(
    callback: CallbackQuery,
    callback_data: SimpleCalendarCallback,
    state: FSMContext
):
    cal = SimpleCalendar()
    selected, picked = await cal.process_selection(callback, callback_data)
    if not selected:
        return

    picked_date = picked.date() if isinstance(picked, datetime) else picked

    if picked_date < date.today():
        await callback.answer(
            "‚ö†Ô∏è –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –æ—Ç —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
        kb_cal = await cal.start_calendar()
        await callback.message.edit_reply_markup(reply_markup=kb_cal)
        return

    await state.update_data(event_date=picked_date.strftime("%Y-%m-%d"))
    await callback.message.answer(
        f"–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {picked_date.strftime('%Y-%m-%d')}\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:"
    )
    await state.set_state(Form.waiting_for_event_time)


@router.message(Form.waiting_for_event_time)
async def process_event_time(msg: Message, state: FSMContext, bot: Bot):
    time_text = msg.text.strip()
    try:
        h, m = map(int, time_text.split(":"))
        assert 0 <= h < 24 and 0 <= m < 60
    except Exception:
        return await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú.")

    data = await state.get_data()
    dt_str = f"{data['event_date']} {time_text}"
    event_dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")

    if event_dt < datetime.now():
        return await msg.answer(
            "‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è."
        )

    eid = database.add_event(
        data["event_name"],
        data["event_description"],
        data["event_city"],
        data["event_direction"],
        dt_str,
        is_approved=0
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ–¥–Ω–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
    await notify_admins_about_event(
        bot=bot,
        event_id=eid,
        event_name=data["event_name"],
        event_description=data["event_description"],
        event_datetime=dt_str,
        event_city=data["event_city"],
        event_direction=data["event_direction"]
    )

    await msg.answer(
        "‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —è —Å–æ–æ–±—â—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."
    )

    await state.clear()
